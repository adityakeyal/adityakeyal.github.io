<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Random thoughts of a Developer</title><link>https://adityakeyal.github.io/categories/java/</link><description>Recent content in java on Random thoughts of a Developer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 16 Jan 2024 07:49:02 +0530</lastBuildDate><atom:link href="https://adityakeyal.github.io/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Performance Issues - Part 2</title><link>https://adityakeyal.github.io/post/java/java-performance-cpu-2/</link><pubDate>Tue, 16 Jan 2024 07:49:02 +0530</pubDate><guid>https://adityakeyal.github.io/post/java/java-performance-cpu-2/</guid><description>Performance Issue - what and why In the previous blog we had discussed some common identifiers of performance issues. In this post we will look at some advanced issues and challenges we face when facing slowness.
Thread Consumption Analysis While multi threaded applications are always a challenge, sometimes we need to identify the consumption of CPU / Memory at a thread level. This is very helpful when viewed in conjunction with a stack trace.</description></item><item><title>Java Performance Issues</title><link>https://adityakeyal.github.io/post/java/java-performance-cpu/</link><pubDate>Wed, 13 Oct 2021 07:49:02 +0530</pubDate><guid>https://adityakeyal.github.io/post/java/java-performance-cpu/</guid><description>Performance Issue - what and why There is nothing more daunting and interesting than issues related to performance. While we pay a lot of &amp;ldquo;undue attention&amp;rdquo; to performance in code reviews, &amp;ldquo;Don&amp;rsquo;t use a Linked List, use an Array List or use a Linked List not an Array List&amp;rdquo;, we often miss the bigger picture. Most performance issues don&amp;rsquo;t come from usage of type of list or types of for loops, they actually come from the most interesting and tricky parts of code.</description></item></channel></rss>